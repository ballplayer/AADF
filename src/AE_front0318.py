# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AE_front0318.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import json
import random
import time
import torch
import common
import glob
import os
import subprocess
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QApplication
import background_rc
from PyQt5 import QtCore, QtGui, QtWidgets
from openpyxl import Workbook
from audio_classification import audio_attack

class Ui_Form(object):
    def setupUi(self, Form):
        self.couple = ''  # 对抗攻击对象
        self.task = ''  # 对抗攻击任务
        self.blackwhite = ''  # 黑白盒攻击
        self.method = ''  # 对抗攻击方法
        self.dataset = ''  # 数据集
        self.model = ''  # 模型
        self.epsilon = 0.5  # 扰动
        self.distance = ''  # 距离范数
        self.target = ''  # 是否有攻击目标
        self.contentpath = "record_content.txt"
        self.photopath = "record_site.txt"
        self.picture_num = 0
        self.photos = []
        Form.setObjectName("Form")
        Form.resize(1305, 755)
        Form.setStyleSheet("background: rgb(255, 255, 255);")
        self.frame = QtWidgets.QFrame(Form)
        self.frame.setGeometry(QtCore.QRect(10, 20, 221, 731))
        self.frame.setStyleSheet("QFrame{\n"
"    background-color: rgba(241, 241, 241, 150);\n"
"    border-radius: 20px;\n"
"}")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setGeometry(QtCore.QRect(10, 10, 201, 141))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label_6 = QtWidgets.QLabel(self.frame_2)
        self.label_6.setGeometry(QtCore.QRect(10, 100, 181, 31))
        self.label_6.setStyleSheet("font: 20px;\n"
"font-family: Microsoft YaHei;\n"
"")
        self.label_6.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.widget_2 = QtWidgets.QWidget(self.frame_2)
        self.widget_2.setGeometry(QtCore.QRect(68, 20, 71, 71))
        self.widget_2.setStyleSheet("image: url(:/picture/user.png);\n"
"border-radius: 35px;\n"
"background-color: rgb(221, 221, 221);")
        self.widget_2.setObjectName("widget_2")
        self.textEdit_3 = QtWidgets.QTextEdit(self.frame)
        self.textEdit_3.setGeometry(QtCore.QRect(10, 160, 201, 561))
        self.textEdit_3.setStyleSheet("\n"
"QTextEdit{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    border: 1px solid rgb(181, 181, 181);\n"
"    border-radius: 8px;\n"
"}\n"
"\n"
"\n"
"QScrollBar:vertical {\n"
"    border-width: 0px;\n"
"    border: none;\n"
"    background:rgba(0, 0, 85, 0);\n"
"    width:12px;\n"
"    margin: 0px 0px 0px 0px;\n"
"}\n"
"QScrollBar::handle:vertical {\n"
"    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
"    stop: 0 rgb(181, 181, 181), stop: 0.5 rgb(181, 181, 181), stop:1 rgb(181, 181, 181));\n"
"    min-height: 20px;\n"
"    max-height: 20px;\n"
"    margin: 0 0px 0 0px;\n"
"    border-radius: 6px;\n"
"}\n"
"QScrollBar::add-line:vertical {\n"
"    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
"    stop: 0 rgba(0, 0, 85, 0), stop: 0.5 rgba(0, 0, 85, 0),  stop:1 rgba(0, 0, 85, 0));\n"
"    height: 0px;\n"
"    border: none;\n"
"    subcontrol-position: bottom;\n"
"    subcontrol-origin: margin;\n"
"}\n"
"QScrollBar::sub-line:vertical {\n"
"    background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
"    stop: 0  rgbargba(0, 0, 85, 0), stop: 0.5 rgba(0, 0, 85, 0),  stop:1 rgba(0, 0, 85, 0));\n"
"    height: 0 px;\n"
"    border: none;\n"
"    subcontrol-position: top;\n"
"    subcontrol-origin: margin;\n"
"}\n"
"QScrollBar::sub-page:vertical {\n"
"     background: rgba(0, 0, 85, 0);\n"
"}\n"
"QScrollBar::add-page:vertical {\n"
"     background: rgba(0, 0, 85, 0);\n"
"}\n"
"")
        self.textEdit_3.setObjectName("textEdit_3")
        self.tabWidget = QtWidgets.QTabWidget(Form)
        self.tabWidget.setGeometry(QtCore.QRect(240, 10, 1061, 741))
        self.tabWidget.setStyleSheet("QTabWidget{\n"
"    background-color: transparent;\n"
"}\n"
"QTabBar::tab{\n"
"    width:200;\n"
"    height:50;\n"
"    font-family: 微软雅黑;\n"
"    font: 17px;\n"
"\n"
"}")
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.tabWidget_2 = QtWidgets.QTabWidget(self.tab)
        self.tabWidget_2.setGeometry(QtCore.QRect(10, 0, 1041, 681))
        self.tabWidget_2.setObjectName("tabWidget_2")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.groupBox_12 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_12.setGeometry(QtCore.QRect(10, 0, 1021, 81))
        self.groupBox_12.setStyleSheet("QGroupBox\n"
"{\n"
"    font: 20px;\n"
"    font-family: 微软雅黑;\n"
"    border-radius: 15px;\n"
"    background-color: rgb(243, 243, 243);\n"
"    margin-top: 5px;\n"
"}\n"
" \n"
"QGroupBox::title\n"
"{\n"
"    subcontrol-origin: margin;\n"
"    subcontrol-position: top center;\n"
"    padding: 0 3px;\n"
"    margin-top: -5px;\n"
"}\n"
"")
        self.groupBox_12.setTitle("")
        self.groupBox_12.setObjectName("groupBox_12")
        self.radioButton_18 = QtWidgets.QRadioButton(self.groupBox_12)
        self.radioButton_18.setGeometry(QtCore.QRect(140, 50, 61, 25))
        self.radioButton_18.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_18.setObjectName("radioButton_18")
        self.radioButton_19 = QtWidgets.QRadioButton(self.groupBox_12)
        self.radioButton_19.setGeometry(QtCore.QRect(430, 50, 61, 25))
        self.radioButton_19.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_19.setObjectName("radioButton_19")
        self.radioButton_20 = QtWidgets.QRadioButton(self.groupBox_12)
        self.radioButton_20.setGeometry(QtCore.QRect(710, 50, 61, 25))
        self.radioButton_20.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_20.setObjectName("radioButton_20")
        self.label_24 = QtWidgets.QLabel(self.groupBox_12)
        self.label_24.setGeometry(QtCore.QRect(139, 10, 131, 31))
        self.label_24.setStyleSheet("font: 20px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"")
        self.label_24.setObjectName("label_24")
        self.widget_3 = QtWidgets.QWidget(self.groupBox_12)
        self.widget_3.setGeometry(QtCore.QRect(40, 10, 61, 61))
        self.widget_3.setStyleSheet("image: url(:/picture/AE1.png);\n"
"border-radius: 35px;\n"
"background-color: rgba(255, 255, 255, 0);")
        self.widget_3.setObjectName("widget_3")
        self.label_31 = QtWidgets.QLabel(self.groupBox_12)
        self.label_31.setGeometry(QtCore.QRect(270, 13, 221, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_31.setFont(font)
        self.label_31.setStyleSheet("font: 15px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"font-weight: 600;\n"
"")
        self.label_31.setObjectName("label_31")
        self.groupBox_13 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_13.setGeometry(QtCore.QRect(10, 80, 1021, 81))
        self.groupBox_13.setStyleSheet("QGroupBox\n"
"{\n"
"    font: 20px;\n"
"    font-family: 微软雅黑;\n"
"    border-radius: 15px;\n"
"    background-color: rgb(243, 243, 243);\n"
"    margin-top: 5px;\n"
"}\n"
" \n"
"QGroupBox::title\n"
"{\n"
"    subcontrol-origin: margin;\n"
"    subcontrol-position: top center;\n"
"    padding: 0 3px;\n"
"    margin-top: -5px;\n"
"}\n"
"")
        self.groupBox_13.setTitle("")
        self.groupBox_13.setObjectName("groupBox_13")
        self.radioButton_27 = QtWidgets.QRadioButton(self.groupBox_13)
        self.radioButton_27.setGeometry(QtCore.QRect(140, 50, 91, 25))
        self.radioButton_27.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_27.setObjectName("radioButton_27")
        self.radioButton_28 = QtWidgets.QRadioButton(self.groupBox_13)
        self.radioButton_28.setGeometry(QtCore.QRect(310, 50, 91, 25))
        self.radioButton_28.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_28.setObjectName("radioButton_28")
        self.radioButton_29 = QtWidgets.QRadioButton(self.groupBox_13)
        self.radioButton_29.setGeometry(QtCore.QRect(480, 50, 91, 25))
        self.radioButton_29.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_29.setObjectName("radioButton_29")
        self.label_25 = QtWidgets.QLabel(self.groupBox_13)
        self.label_25.setGeometry(QtCore.QRect(139, 10, 131, 31))
        self.label_25.setStyleSheet("font: 20px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"")
        self.label_25.setObjectName("label_25")
        self.widget_4 = QtWidgets.QWidget(self.groupBox_13)
        self.widget_4.setGeometry(QtCore.QRect(40, 10, 61, 61))
        self.widget_4.setStyleSheet("image: url(:/picture/AE2.png);\n"
"border-radius: 35px;\n"
"background-color: rgba(255, 255, 255, 0);")
        self.widget_4.setObjectName("widget_4")
        self.radioButton_33 = QtWidgets.QRadioButton(self.groupBox_13)
        self.radioButton_33.setGeometry(QtCore.QRect(650, 50, 91, 25))
        self.radioButton_33.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_33.setObjectName("radioButton_33")
        self.radioButton_34 = QtWidgets.QRadioButton(self.groupBox_13)
        self.radioButton_34.setGeometry(QtCore.QRect(820, 50, 91, 25))
        self.radioButton_34.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_34.setObjectName("radioButton_34")
        self.label_32 = QtWidgets.QLabel(self.groupBox_13)
        self.label_32.setGeometry(QtCore.QRect(270, 13, 221, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_32.setFont(font)
        self.label_32.setStyleSheet("font: 15px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"font-weight: 600;\n"
"")
        self.label_32.setObjectName("label_32")
        self.groupBox_14 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_14.setGeometry(QtCore.QRect(10, 160, 1021, 81))
        self.groupBox_14.setStyleSheet("QGroupBox\n"
"{\n"
"    font: 20px;\n"
"    font-family: 微软雅黑;\n"
"    border-radius: 15px;\n"
"    background-color: rgb(243, 243, 243);\n"
"    margin-top: 5px;\n"
"}\n"
" \n"
"QGroupBox::title\n"
"{\n"
"    subcontrol-origin: margin;\n"
"    subcontrol-position: top center;\n"
"    padding: 0 3px;\n"
"    margin-top: -5px;\n"
"}\n"
"")
        self.groupBox_14.setTitle("")
        self.groupBox_14.setObjectName("groupBox_14")
        self.radioButton_35 = QtWidgets.QRadioButton(self.groupBox_14)
        self.radioButton_35.setGeometry(QtCore.QRect(140, 50, 61, 25))
        self.radioButton_35.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_35.setObjectName("radioButton_35")
        self.radioButton_36 = QtWidgets.QRadioButton(self.groupBox_14)
        self.radioButton_36.setGeometry(QtCore.QRect(430, 50, 61, 25))
        self.radioButton_36.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_36.setObjectName("radioButton_36")
        self.radioButton_37 = QtWidgets.QRadioButton(self.groupBox_14)
        self.radioButton_37.setGeometry(QtCore.QRect(710, 50, 121, 25))
        self.radioButton_37.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_37.setObjectName("radioButton_37")
        self.label_26 = QtWidgets.QLabel(self.groupBox_14)
        self.label_26.setGeometry(QtCore.QRect(139, 10, 131, 31))
        self.label_26.setStyleSheet("font: 20px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"")
        self.label_26.setObjectName("label_26")
        self.widget_5 = QtWidgets.QWidget(self.groupBox_14)
        self.widget_5.setGeometry(QtCore.QRect(40, 10, 61, 61))
        self.widget_5.setStyleSheet("image: url(:/picture/AE3.png);\n"
"border-radius: 35px;\n"
"background-color: rgba(255, 255, 255, 0);")
        self.widget_5.setObjectName("widget_5")
        self.label_36 = QtWidgets.QLabel(self.groupBox_14)
        self.label_36.setGeometry(QtCore.QRect(270, 13, 251, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_36.setFont(font)
        self.label_36.setStyleSheet("font: 15px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"font-weight: 600;\n"
"")
        self.label_36.setObjectName("label_36")
        self.groupBox_15 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_15.setGeometry(QtCore.QRect(10, 240, 1021, 81))
        self.groupBox_15.setStyleSheet("QGroupBox\n"
"{\n"
"    font: 20px;\n"
"    font-family: 微软雅黑;\n"
"    border-radius: 15px;\n"
"    background-color: rgb(243, 243, 243);\n"
"    margin-top: 5px;\n"
"}\n"
" \n"
"QGroupBox::title\n"
"{\n"
"    subcontrol-origin: margin;\n"
"    subcontrol-position: top center;\n"
"    padding: 0 3px;\n"
"    margin-top: -5px;\n"
"}\n"
"")
        self.groupBox_15.setTitle("")
        self.groupBox_15.setObjectName("groupBox_15")
        self.label_27 = QtWidgets.QLabel(self.groupBox_15)
        self.label_27.setGeometry(QtCore.QRect(139, 10, 131, 31))
        self.label_27.setStyleSheet("font: 20px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"")
        self.label_27.setObjectName("label_27")
        self.widget_6 = QtWidgets.QWidget(self.groupBox_15)
        self.widget_6.setGeometry(QtCore.QRect(40, 10, 61, 61))
        self.widget_6.setStyleSheet("image: url(:/picture/AE4.png);\n"
"border-radius: 35px;\n"
"background-color: rgba(255, 255, 255, 0);")
        self.widget_6.setObjectName("widget_6")
        self.comboBox_4 = QtWidgets.QComboBox(self.groupBox_15)
        self.comboBox_4.setGeometry(QtCore.QRect(190, 50, 221, 22))
        self.comboBox_4.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 2px solid rgb(89, 89, 89);   /* 边框 */\n"
"    border-radius:5px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    font: normal normal 15px \"Microsoft YaHei\";\n"
"    background: transparent;\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:black;/*字体颜色*/\n"
"    background-color: transparent;\n"
"    border-image: url(:/png/60.png);/*背景图片，圆角*/\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体样式 */\n"
"QComboBox QAbstractItemView {\n"
"    outline: 0px solid gray;   /* 选定项的虚框 */\n"
"    border-radius:10px;   /* 圆角 */\n"
"    padding-top:10px;    /*上下都留10px，是因为选中项是矩形，如果不留，移动到第一项和最后一项会变为直角，不好看*/\n"
"    padding-bottom:10px;\n"
" \n"
"    color:rgb(123,123,123);\n"
"    border-image: url(:/png/84.png);/*下拉框背景，圆角图片*/\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体每项的样式 */\n"
"QComboBox QAbstractItemView::item {\n"
" \n"
"    min-height: 26px;/*每项高度*/\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体越过每项的样式 */\n"
"QComboBox QAbstractItemView::item:hover {\n"
"    color:rgb(255,255,255);\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体被选择的每项的样式 */\n"
"QComboBox QAbstractItemView::item:selected {\n"
"    color:rgb(255,255,255);\n"
" \n"
"    border-image: url(:/png/85.png);/*鼠标悬浮时背景图片*/\n"
"}")
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_5 = QtWidgets.QComboBox(self.groupBox_15)
        self.comboBox_5.setGeometry(QtCore.QRect(476, 50, 201, 22))
        self.comboBox_5.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 2px solid rgb(89, 89, 89);   /* 边框 */\n"
"    border-radius:5px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    font: normal normal 15px \"Microsoft YaHei\";\n"
"    background: transparent;\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:black;/*字体颜色*/\n"
"    background-color: transparent;\n"
"    border-image: url(:/png/60.png);/*背景图片，圆角*/\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体样式 */\n"
"QComboBox QAbstractItemView {\n"
"    outline: 0px solid gray;   /* 选定项的虚框 */\n"
"    border-radius:10px;   /* 圆角 */\n"
"    padding-top:10px;    /*上下都留10px，是因为选中项是矩形，如果不留，移动到第一项和最后一项会变为直角，不好看*/\n"
"    padding-bottom:10px;\n"
" \n"
"    color:rgb(123,123,123);\n"
"    border-image: url(:/png/84.png);/*下拉框背景，圆角图片*/\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体每项的样式 */\n"
"QComboBox QAbstractItemView::item {\n"
" \n"
"    min-height: 26px;/*每项高度*/\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体越过每项的样式 */\n"
"QComboBox QAbstractItemView::item:hover {\n"
"    color:rgb(255,255,255);\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体被选择的每项的样式 */\n"
"QComboBox QAbstractItemView::item:selected {\n"
"    color:rgb(255,255,255);\n"
" \n"
"    border-image: url(:/png/85.png);/*鼠标悬浮时背景图片*/\n"
"}")
        self.comboBox_5.setObjectName("comboBox_5")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_6 = QtWidgets.QComboBox(self.groupBox_15)
        self.comboBox_6.setGeometry(QtCore.QRect(800, 50, 191, 22))
        self.comboBox_6.setStyleSheet("/* 未下拉时，QComboBox的样式 */\n"
"QComboBox {\n"
"    border: 2px solid rgb(89, 89, 89);   /* 边框 */\n"
"    border-radius:5px;   /* 圆角 */\n"
"    padding: 0px 0px 0px 10px; /* 上内边距、右内边距、下内边距、左内边距 */\n"
"    color: rgba(51,51,51,1);\n"
"    font: normal normal 15px \"Microsoft YaHei\";\n"
"    background: transparent;\n"
"    text-align: AlignHCenter;\n"
" \n"
"    color:black;/*字体颜色*/\n"
"    background-color: transparent;\n"
"    border-image: url(:/png/60.png);/*背景图片，圆角*/\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体样式 */\n"
"QComboBox QAbstractItemView {\n"
"    outline: 0px solid gray;   /* 选定项的虚框 */\n"
"    border-radius:10px;   /* 圆角 */\n"
"    padding-top:10px;    /*上下都留10px，是因为选中项是矩形，如果不留，移动到第一项和最后一项会变为直角，不好看*/\n"
"    padding-bottom:10px;\n"
" \n"
"    color:rgb(123,123,123);\n"
"    border-image: url(:/png/84.png);/*下拉框背景，圆角图片*/\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体每项的样式 */\n"
"QComboBox QAbstractItemView::item {\n"
" \n"
"    min-height: 26px;/*每项高度*/\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体越过每项的样式 */\n"
"QComboBox QAbstractItemView::item:hover {\n"
"    color:rgb(255,255,255);\n"
"}\n"
" \n"
"/* 下拉后，整个下拉窗体被选择的每项的样式 */\n"
"QComboBox QAbstractItemView::item:selected {\n"
"    color:rgb(255,255,255);\n"
" \n"
"    border-image: url(:/png/85.png);/*鼠标悬浮时背景图片*/\n"
"}")
        self.comboBox_6.setObjectName("comboBox_6")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.label_37 = QtWidgets.QLabel(self.groupBox_15)
        self.label_37.setGeometry(QtCore.QRect(270, 13, 221, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_37.setFont(font)
        self.label_37.setStyleSheet("font: 15px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"font-weight: 600;\n"
"")
        self.label_37.setObjectName("label_37")
        self.label_41 = QtWidgets.QLabel(self.groupBox_15)
        self.label_41.setGeometry(QtCore.QRect(144, 43, 41, 31))
        self.label_41.setStyleSheet("font: 15px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"")
        self.label_41.setObjectName("label_41")
        self.label_42 = QtWidgets.QLabel(self.groupBox_15)
        self.label_42.setGeometry(QtCore.QRect(430, 43, 41, 31))
        self.label_42.setStyleSheet("font: 15px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"")
        self.label_42.setObjectName("label_42")
        self.label_43 = QtWidgets.QLabel(self.groupBox_15)
        self.label_43.setGeometry(QtCore.QRect(694, 43, 111, 31))
        self.label_43.setStyleSheet("font: 15px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"")
        self.label_43.setObjectName("label_43")
        self.groupBox_16 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_16.setGeometry(QtCore.QRect(10, 320, 1021, 81))
        self.groupBox_16.setStyleSheet("QGroupBox\n"
"{\n"
"    font: 20px;\n"
"    font-family: 微软雅黑;\n"
"    border-radius: 15px;\n"
"    background-color: rgb(243, 243, 243);\n"
"    margin-top: 5px;\n"
"}\n"
" \n"
"QGroupBox::title\n"
"{\n"
"    subcontrol-origin: margin;\n"
"    subcontrol-position: top center;\n"
"    padding: 0 3px;\n"
"    margin-top: -5px;\n"
"}\n"
"")
        self.groupBox_16.setTitle("")
        self.groupBox_16.setObjectName("groupBox_16")
        self.radioButton_30 = QtWidgets.QRadioButton(self.groupBox_16)
        self.radioButton_30.setGeometry(QtCore.QRect(140, 50, 81, 25))
        self.radioButton_30.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_30.setObjectName("radioButton_30")
        self.radioButton_31 = QtWidgets.QRadioButton(self.groupBox_16)
        self.radioButton_31.setGeometry(QtCore.QRect(250, 50, 71, 25))
        self.radioButton_31.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_31.setObjectName("radioButton_31")
        self.radioButton_32 = QtWidgets.QRadioButton(self.groupBox_16)
        self.radioButton_32.setGeometry(QtCore.QRect(340, 50, 111, 25))
        self.radioButton_32.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_32.setObjectName("radioButton_32")
        self.label_28 = QtWidgets.QLabel(self.groupBox_16)
        self.label_28.setGeometry(QtCore.QRect(139, 10, 131, 31))
        self.label_28.setStyleSheet("font: 20px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"")
        self.label_28.setObjectName("label_28")
        self.widget_8 = QtWidgets.QWidget(self.groupBox_16)
        self.widget_8.setGeometry(QtCore.QRect(40, 10, 61, 61))
        self.widget_8.setStyleSheet("image: url(:/picture/AE5.png);\n"
"border-radius: 35px;\n"
"background-color: rgba(255, 255, 255, 0);")
        self.widget_8.setObjectName("widget_8")
        self.radioButton_38 = QtWidgets.QRadioButton(self.groupBox_16)
        self.radioButton_38.setGeometry(QtCore.QRect(460, 50, 81, 25))
        self.radioButton_38.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_38.setObjectName("radioButton_38")
        self.radioButton_40 = QtWidgets.QRadioButton(self.groupBox_16)
        self.radioButton_40.setGeometry(QtCore.QRect(560, 50, 161, 25))
        self.radioButton_40.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_40.setObjectName("radioButton_40")
        self.radioButton_41 = QtWidgets.QRadioButton(self.groupBox_16)
        self.radioButton_41.setGeometry(QtCore.QRect(740, 50, 111, 25))
        self.radioButton_41.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_41.setObjectName("radioButton_41")
        self.label_38 = QtWidgets.QLabel(self.groupBox_16)
        self.label_38.setGeometry(QtCore.QRect(270, 13, 221, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_38.setFont(font)
        self.label_38.setStyleSheet("font: 15px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"font-weight: 600;\n"
"")
        self.label_38.setObjectName("label_38")
        self.groupBox_17 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_17.setGeometry(QtCore.QRect(10, 400, 1021, 81))
        self.groupBox_17.setStyleSheet("QGroupBox\n"
"{\n"
"    font: 20px;\n"
"    font-family: 微软雅黑;\n"
"    border-radius: 15px;\n"
"    background-color: rgb(243, 243, 243);\n"
"    margin-top: 5px;\n"
"}\n"
" \n"
"QGroupBox::title\n"
"{\n"
"    subcontrol-origin: margin;\n"
"    subcontrol-position: top center;\n"
"    padding: 0 3px;\n"
"    margin-top: -5px;\n"
"}\n"
"")
        self.groupBox_17.setTitle("")
        self.groupBox_17.setObjectName("groupBox_17")
        self.radioButton_42 = QtWidgets.QRadioButton(self.groupBox_17)
        self.radioButton_42.setGeometry(QtCore.QRect(140, 50, 111, 25))
        self.radioButton_42.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_42.setObjectName("radioButton_42")
        self.radioButton_43 = QtWidgets.QRadioButton(self.groupBox_17)
        self.radioButton_43.setGeometry(QtCore.QRect(270, 50, 81, 25))
        self.radioButton_43.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_43.setObjectName("radioButton_43")
        self.radioButton_44 = QtWidgets.QRadioButton(self.groupBox_17)
        self.radioButton_44.setGeometry(QtCore.QRect(370, 50, 111, 25))
        self.radioButton_44.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_44.setObjectName("radioButton_44")
        self.label_29 = QtWidgets.QLabel(self.groupBox_17)
        self.label_29.setGeometry(QtCore.QRect(139, 10, 131, 31))
        self.label_29.setStyleSheet("font: 20px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"")
        self.label_29.setObjectName("label_29")
        self.widget_11 = QtWidgets.QWidget(self.groupBox_17)
        self.widget_11.setGeometry(QtCore.QRect(40, 10, 61, 61))
        self.widget_11.setStyleSheet("image: url(:/picture/AE6.png);\n"
"border-radius: 35px;\n"
"background-color: rgba(255, 255, 255, 0);")
        self.widget_11.setObjectName("widget_11")
        self.radioButton_46 = QtWidgets.QRadioButton(self.groupBox_17)
        self.radioButton_46.setGeometry(QtCore.QRect(510, 50, 91, 25))
        self.radioButton_46.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_46.setObjectName("radioButton_46")
        self.radioButton_47 = QtWidgets.QRadioButton(self.groupBox_17)
        self.radioButton_47.setGeometry(QtCore.QRect(640, 50, 81, 25))
        self.radioButton_47.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_47.setObjectName("radioButton_47")
        self.radioButton_48 = QtWidgets.QRadioButton(self.groupBox_17)
        self.radioButton_48.setGeometry(QtCore.QRect(750, 50, 111, 25))
        self.radioButton_48.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_48.setObjectName("radioButton_48")
        self.label_39 = QtWidgets.QLabel(self.groupBox_17)
        self.label_39.setGeometry(QtCore.QRect(270, 13, 221, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_39.setFont(font)
        self.label_39.setStyleSheet("font: 15px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"font-weight: 600;\n"
"")
        self.label_39.setObjectName("label_39")
        self.groupBox_18 = QtWidgets.QGroupBox(self.tab_3)
        self.groupBox_18.setGeometry(QtCore.QRect(10, 480, 1021, 81))
        self.groupBox_18.setStyleSheet("QGroupBox\n"
"{\n"
"    font: 20px;\n"
"    font-family: 微软雅黑;\n"
"    border-radius: 15px;\n"
"    background-color: rgb(243, 243, 243);\n"
"    margin-top: 5px;\n"
"}\n"
" \n"
"QGroupBox::title\n"
"{\n"
"    subcontrol-origin: margin;\n"
"    subcontrol-position: top center;\n"
"    padding: 0 3px;\n"
"    margin-top: -5px;\n"
"}\n"
"")
        self.groupBox_18.setTitle("")
        self.groupBox_18.setObjectName("groupBox_18")
        self.label_30 = QtWidgets.QLabel(self.groupBox_18)
        self.label_30.setGeometry(QtCore.QRect(139, 17, 131, 31))
        self.label_30.setStyleSheet("font: 20px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"")
        self.label_30.setObjectName("label_30")
        self.widget_12 = QtWidgets.QWidget(self.groupBox_18)
        self.widget_12.setGeometry(QtCore.QRect(40, 20, 61, 61))
        self.widget_12.setStyleSheet("image: url(:/picture/AE7.png);\n"
"border-radius: 35px;\n"
"background-color: rgba(255, 255, 255, 0);")
        self.widget_12.setObjectName("widget_12")
        self.groupBox_19 = QtWidgets.QGroupBox(self.groupBox_18)
        self.groupBox_19.setGeometry(QtCore.QRect(140, 50, 171, 31))
        self.groupBox_19.setStyleSheet("QGroupBox\n"
"{\n"
"    font: 20px;\n"
"    font-family: 微软雅黑;\n"
"    border-radius: 15px;\n"
"    background-color: rgb(243, 243, 243);\n"
"    margin-top: 5px;\n"
"}\n"
"")
        self.groupBox_19.setTitle("")
        self.groupBox_19.setObjectName("groupBox_19")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox_19)
        self.lineEdit_3.setGeometry(QtCore.QRect(50, 4, 51, 21))
        self.lineEdit_3.setStyleSheet("QLineEdit{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    border: 1px solid rgb(181, 181, 181);\n"
"    border-radius: 8px;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"}")
        self.lineEdit_3.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_33 = QtWidgets.QLabel(self.groupBox_19)
        self.label_33.setGeometry(QtCore.QRect(0, -3, 41, 31))
        self.label_33.setStyleSheet("font: 15px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"")
        self.label_33.setObjectName("label_33")
        self.groupBox_20 = QtWidgets.QGroupBox(self.groupBox_18)
        self.groupBox_20.setGeometry(QtCore.QRect(330, 50, 371, 31))
        self.groupBox_20.setStyleSheet("QGroupBox\n"
"{\n"
"    font: 20px;\n"
"    font-family: 微软雅黑;\n"
"    border-radius: 15px;\n"
"    background-color: rgb(243, 243, 243);\n"
"    margin-top: 5px;\n"
"}\n"
"")
        self.groupBox_20.setTitle("")
        self.groupBox_20.setObjectName("groupBox_20")
        self.label_34 = QtWidgets.QLabel(self.groupBox_20)
        self.label_34.setGeometry(QtCore.QRect(20, 0, 61, 31))
        self.label_34.setStyleSheet("font: 15px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"")
        self.label_34.setObjectName("label_34")
        self.radioButton_49 = QtWidgets.QRadioButton(self.groupBox_20)
        self.radioButton_49.setGeometry(QtCore.QRect(100, 0, 41, 25))
        self.radioButton_49.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_49.setObjectName("radioButton_49")
        self.radioButton_50 = QtWidgets.QRadioButton(self.groupBox_20)
        self.radioButton_50.setGeometry(QtCore.QRect(160, 0, 41, 25))
        self.radioButton_50.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_50.setObjectName("radioButton_50")
        self.radioButton_51 = QtWidgets.QRadioButton(self.groupBox_20)
        self.radioButton_51.setGeometry(QtCore.QRect(220, 0, 41, 25))
        self.radioButton_51.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_51.setObjectName("radioButton_51")
        self.radioButton_52 = QtWidgets.QRadioButton(self.groupBox_20)
        self.radioButton_52.setGeometry(QtCore.QRect(280, 0, 51, 25))
        self.radioButton_52.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_52.setObjectName("radioButton_52")
        self.groupBox_21 = QtWidgets.QGroupBox(self.groupBox_18)
        self.groupBox_21.setGeometry(QtCore.QRect(710, 50, 251, 31))
        self.groupBox_21.setStyleSheet("QGroupBox\n"
"{\n"
"    font: 20px;\n"
"    font-family: 微软雅黑;\n"
"    border-radius: 15px;\n"
"    background-color: rgb(243, 243, 243);\n"
"    margin-top: 5px;\n"
"}\n"
"")
        self.groupBox_21.setTitle("")
        self.groupBox_21.setObjectName("groupBox_21")
        self.label_35 = QtWidgets.QLabel(self.groupBox_21)
        self.label_35.setGeometry(QtCore.QRect(20, -3, 111, 31))
        self.label_35.setStyleSheet("font: 15px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"")
        self.label_35.setObjectName("label_35")
        self.radioButton_53 = QtWidgets.QRadioButton(self.groupBox_21)
        self.radioButton_53.setGeometry(QtCore.QRect(140, 0, 41, 25))
        self.radioButton_53.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_53.setObjectName("radioButton_53")
        self.radioButton_55 = QtWidgets.QRadioButton(self.groupBox_21)
        self.radioButton_55.setGeometry(QtCore.QRect(190, 0, 41, 25))
        self.radioButton_55.setStyleSheet("QRadioButton{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    background-color: rgba(255, 255, 255, 0);\n"
"    border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"QRadioButton:hover {\n"
"    background-color: rgb(166, 166, 166);\n"
"}\n"
"")
        self.radioButton_55.setObjectName("radioButton_55")
        self.label_40 = QtWidgets.QLabel(self.groupBox_18)
        self.label_40.setGeometry(QtCore.QRect(270, 20, 481, 31))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_40.setFont(font)
        self.label_40.setStyleSheet("font: 15px;\n"
"font-family: 微软雅黑;\n"
"background-color: rgba(255, 255, 255, 0);\n"
"font-weight: 600;\n"
"")
        self.label_40.setObjectName("label_40")
        self.pushButton_15 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_15.setGeometry(QtCore.QRect(290, 570, 141, 48))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_15.sizePolicy().hasHeightForWidth())
        self.pushButton_15.setSizePolicy(sizePolicy)
        self.pushButton_15.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_15.setFont(font)
        self.pushButton_15.setToolTipDuration(-1)
        self.pushButton_15.setStyleSheet("QPushButton {\n"
"    border: 2px solid rgb(52, 59, 72);\n"
"    border-radius: 5px;    \n"
"    background-color: rgb(52, 59, 72);\n"
"    color:white;\n"
"    font: 20px;\n"
"    font_famili: 微软雅黑;\n"
"    font-weight: 600;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: rgb(57, 65, 80);\n"
"    border: 2px solid rgb(61, 70, 86);\n"
"}\n"
"QPushButton:pressed {    \n"
"    background-color: rgb(35, 40, 49);\n"
"    border: 2px solid rgb(43, 50, 61);\n"
"}")
        self.pushButton_15.setIconSize(QtCore.QSize(14, 14))
        self.pushButton_15.setObjectName("pushButton_15")
        self.pushButton_16 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_16.setGeometry(QtCore.QRect(610, 570, 141, 48))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_16.sizePolicy().hasHeightForWidth())
        self.pushButton_16.setSizePolicy(sizePolicy)
        self.pushButton_16.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_16.setFont(font)
        self.pushButton_16.setToolTipDuration(-1)
        self.pushButton_16.setStyleSheet("QPushButton {\n"
"    border: 2px solid rgb(52, 59, 72);\n"
"    border-radius: 5px;    \n"
"    background-color: rgb(52, 59, 72);\n"
"    color:white;\n"
"    font: 20px;\n"
"    font_famili: 微软雅黑;\n"
"    font-weight: 600;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: rgb(57, 65, 80);\n"
"    border: 2px solid rgb(61, 70, 86);\n"
"}\n"
"QPushButton:pressed {    \n"
"    background-color: rgb(35, 40, 49);\n"
"    border: 2px solid rgb(43, 50, 61);\n"
"}")
        self.pushButton_16.setIconSize(QtCore.QSize(14, 14))
        self.pushButton_16.setObjectName("pushButton_16")
        self.tabWidget_2.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.groupBox_6 = QtWidgets.QGroupBox(self.tab_4)
        self.groupBox_6.setGeometry(QtCore.QRect(10, 220, 1011, 401))
        self.groupBox_6.setTitle("")
        self.groupBox_6.setObjectName("groupBox_6")
        self.label_4 = QtWidgets.QLabel(self.groupBox_6)
        self.label_4.setGeometry(QtCore.QRect(230, 10, 61, 16))
        self.label_4.setStyleSheet("font: 15px;\n"
"font-family: 微软雅黑;")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.groupBox_6)
        self.label_5.setGeometry(QtCore.QRect(730, 10, 61, 16))
        self.label_5.setStyleSheet("font: 15px;\n"
"font-family: 微软雅黑;")
        self.label_5.setObjectName("label_5")
        self.pushButton_7 = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_7.setGeometry(QtCore.QRect(110, 340, 141, 48))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_7.sizePolicy().hasHeightForWidth())
        self.pushButton_7.setSizePolicy(sizePolicy)
        self.pushButton_7.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setToolTipDuration(-1)
        self.pushButton_7.setStyleSheet("QPushButton {\n"
"    border: 2px solid rgb(52, 59, 72);\n"
"    border-radius: 5px;    \n"
"    background-color: rgb(52, 59, 72);\n"
"    color:white;\n"
"    font: 20px;\n"
"    font_famili: 微软雅黑;\n"
"    font-weight: 600;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: rgb(57, 65, 80);\n"
"    border: 2px solid rgb(61, 70, 86);\n"
"}\n"
"QPushButton:pressed {    \n"
"    background-color: rgb(35, 40, 49);\n"
"    border: 2px solid rgb(43, 50, 61);\n"
"}")
        self.pushButton_7.setIconSize(QtCore.QSize(14, 14))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_8.setGeometry(QtCore.QRect(330, 340, 141, 48))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_8.sizePolicy().hasHeightForWidth())
        self.pushButton_8.setSizePolicy(sizePolicy)
        self.pushButton_8.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_8.setFont(font)
        self.pushButton_8.setToolTipDuration(-1)
        self.pushButton_8.setStyleSheet("QPushButton {\n"
"    border: 2px solid rgb(52, 59, 72);\n"
"    border-radius: 5px;    \n"
"    background-color: rgb(52, 59, 72);\n"
"    color:white;\n"
"    font: 20px;\n"
"    font_famili: 微软雅黑;\n"
"    font-weight: 600;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: rgb(57, 65, 80);\n"
"    border: 2px solid rgb(61, 70, 86);\n"
"}\n"
"QPushButton:pressed {    \n"
"    background-color: rgb(35, 40, 49);\n"
"    border: 2px solid rgb(43, 50, 61);\n"
"}")
        self.pushButton_8.setIconSize(QtCore.QSize(14, 14))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_9.setGeometry(QtCore.QRect(550, 340, 141, 48))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_9.sizePolicy().hasHeightForWidth())
        self.pushButton_9.setSizePolicy(sizePolicy)
        self.pushButton_9.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_9.setFont(font)
        self.pushButton_9.setToolTipDuration(-1)
        self.pushButton_9.setStyleSheet("QPushButton {\n"
"    border: 2px solid rgb(52, 59, 72);\n"
"    border-radius: 5px;    \n"
"    background-color: rgb(52, 59, 72);\n"
"    color:white;\n"
"    font: 20px;\n"
"    font_famili: 微软雅黑;\n"
"    font-weight: 600;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: rgb(57, 65, 80);\n"
"    border: 2px solid rgb(61, 70, 86);\n"
"}\n"
"QPushButton:pressed {    \n"
"    background-color: rgb(35, 40, 49);\n"
"    border: 2px solid rgb(43, 50, 61);\n"
"}")
        self.pushButton_9.setIconSize(QtCore.QSize(14, 14))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_10 = QtWidgets.QPushButton(self.groupBox_6)
        self.pushButton_10.setGeometry(QtCore.QRect(770, 340, 141, 48))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_10.sizePolicy().hasHeightForWidth())
        self.pushButton_10.setSizePolicy(sizePolicy)
        self.pushButton_10.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_10.setFont(font)
        self.pushButton_10.setToolTipDuration(-1)
        self.pushButton_10.setStyleSheet("QPushButton {\n"
"    border: 2px solid rgb(52, 59, 72);\n"
"    border-radius: 5px;    \n"
"    background-color: rgb(52, 59, 72);\n"
"    color:white;\n"
"    font: 20px;\n"
"    font_famili: 微软雅黑;\n"
"    font-weight: 600;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: rgb(57, 65, 80);\n"
"    border: 2px solid rgb(61, 70, 86);\n"
"}\n"
"QPushButton:pressed {    \n"
"    background-color: rgb(35, 40, 49);\n"
"    border: 2px solid rgb(43, 50, 61);\n"
"}")
        self.pushButton_10.setIconSize(QtCore.QSize(14, 14))
        self.pushButton_10.setObjectName("pushButton_10")
        self.label = QtWidgets.QLabel(self.groupBox_6)
        self.label.setGeometry(QtCore.QRect(20, 30, 481, 301))
        self.label.setStyleSheet("border: 1px solid rgb(89, 89, 89); \n"
"")
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox_6)
        self.label_2.setGeometry(QtCore.QRect(520, 30, 481, 301))
        self.label_2.setStyleSheet("border: 1px solid rgb(89, 89, 89); \n"
"")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.textEdit_9 = QtWidgets.QTextEdit(self.tab_4)
        self.textEdit_9.setGeometry(QtCore.QRect(520, 10, 501, 81))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(-1)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.textEdit_9.setFont(font)
        self.textEdit_9.setStyleSheet("\n"
"QTextEdit{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    border: 2px solid rgb(181, 181, 181);\n"
"    border-radius: 8px;\n"
"}\n"
"\n"
"\n"
"QScrollBar:vertical {\n"
"    border-width: 0px;\n"
"    border: none;\n"
"          background:rgba(0, 0, 85, 0);\n"
"          width:12px;\n"
"          margin: 0px 0px 0px 0px;\n"
"      }\n"
"QScrollBar::handle:vertical {\n"
"          background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
"          stop: 0 rgb(181, 181, 181), stop: 0.5 rgb(181, 181, 181), stop:1 rgb(181, 181, 181));\n"
"          min-height: 20px;\n"
"          max-height: 20px;\n"
"          margin: 0 0px 0 0px;\n"
"          border-radius: 6px;\n"
"      }\n"
"      QScrollBar::add-line:vertical {\n"
"          background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
"          stop: 0 rgba(0, 0, 85, 0), stop: 0.5 rgba(0, 0, 85, 0),  stop:1 rgba(0, 0, 85, 0));\n"
"          height: 0px;\n"
"          border: none;\n"
"          subcontrol-position: bottom;\n"
"          subcontrol-origin: margin;\n"
"      }\n"
"      QScrollBar::sub-line:vertical {\n"
"          background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
"          stop: 0  rgbargba(0, 0, 85, 0), stop: 0.5 rgba(0, 0, 85, 0),  stop:1 rgba(0, 0, 85, 0));\n"
"          height: 0 px;\n"
"          border: none;\n"
"          subcontrol-position: top;\n"
"          subcontrol-origin: margin;\n"
"      }\n"
"      QScrollBar::sub-page:vertical {\n"
"      background: rgba(0, 0, 85, 0);\n"
"      }\n"
"\n"
"      QScrollBar::add-page:vertical {\n"
"      background: rgba(0, 0, 85, 0);\n"
"      }\n"
"")
        self.textEdit_9.setFrameShape(QtWidgets.QFrame.Box)
        self.textEdit_9.setLineWidth(1)
        self.textEdit_9.setMidLineWidth(0)
        self.textEdit_9.setObjectName("textEdit_9")
        self.textEdit_10 = QtWidgets.QTextEdit(self.tab_4)
        self.textEdit_10.setGeometry(QtCore.QRect(10, 10, 501, 201))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(-1)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.textEdit_10.setFont(font)
        self.textEdit_10.setStyleSheet("\n"
"QTextEdit{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    border: 2px solid rgb(181, 181, 181);\n"
"    border-radius: 8px;\n"
"}\n"
"\n"
"\n"
"QScrollBar:vertical {\n"
"    border-width: 0px;\n"
"    border: none;\n"
"          background:rgba(0, 0, 85, 0);\n"
"          width:12px;\n"
"          margin: 0px 0px 0px 0px;\n"
"      }\n"
"QScrollBar::handle:vertical {\n"
"          background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
"          stop: 0 rgb(181, 181, 181), stop: 0.5 rgb(181, 181, 181), stop:1 rgb(181, 181, 181));\n"
"          min-height: 20px;\n"
"          max-height: 20px;\n"
"          margin: 0 0px 0 0px;\n"
"          border-radius: 6px;\n"
"      }\n"
"      QScrollBar::add-line:vertical {\n"
"          background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
"          stop: 0 rgba(0, 0, 85, 0), stop: 0.5 rgba(0, 0, 85, 0),  stop:1 rgba(0, 0, 85, 0));\n"
"          height: 0px;\n"
"          border: none;\n"
"          subcontrol-position: bottom;\n"
"          subcontrol-origin: margin;\n"
"      }\n"
"      QScrollBar::sub-line:vertical {\n"
"          background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
"          stop: 0  rgbargba(0, 0, 85, 0), stop: 0.5 rgba(0, 0, 85, 0),  stop:1 rgba(0, 0, 85, 0));\n"
"          height: 0 px;\n"
"          border: none;\n"
"          subcontrol-position: top;\n"
"          subcontrol-origin: margin;\n"
"      }\n"
"      QScrollBar::sub-page:vertical {\n"
"      background: rgba(0, 0, 85, 0);\n"
"      }\n"
"\n"
"      QScrollBar::add-page:vertical {\n"
"      background: rgba(0, 0, 85, 0);\n"
"      }\n"
"")
        self.textEdit_10.setFrameShape(QtWidgets.QFrame.Box)
        self.textEdit_10.setLineWidth(1)
        self.textEdit_10.setMidLineWidth(0)
        self.textEdit_10.setObjectName("textEdit_10")
        self.label_21 = QtWidgets.QLabel(self.tab_4)
        self.label_21.setGeometry(QtCore.QRect(520, 100, 501, 111))
        self.label_21.setStyleSheet("background-color: rgb(0, 85, 127);\n"
"border-radius: 15px;")
        self.label_21.setText("")
        self.label_21.setScaledContents(True)
        self.label_21.setWordWrap(False)
        self.label_21.setObjectName("label_21")
        self.label_7 = QtWidgets.QLabel(self.tab_4)
        self.label_7.setGeometry(QtCore.QRect(680, 110, 81, 41))
        self.label_7.setStyleSheet("QLabel{\n"
"    background:rgb(255, 255, 255, 60);\n"
"    color:white;\n"
"    border-radius: 8px;\n"
"    font-family: 微软雅黑;\n"
"    text-align: left;\n"
"    font: 20px;\n"
"}")
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.tab_4)
        self.label_8.setGeometry(QtCore.QRect(530, 110, 231, 41))
        self.label_8.setStyleSheet("QLabel{\n"
"    background:rgb(255, 255, 255, 60);\n"
"    color:white;\n"
"    border-radius: 8px;\n"
"    font-family: 微软雅黑;\n"
"    text-align: left;\n"
"    font: 20px;\n"
"}")
        self.label_8.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.tab_4)
        self.label_9.setGeometry(QtCore.QRect(780, 110, 231, 41))
        self.label_9.setStyleSheet("QLabel{\n"
"    background:rgb(255, 255, 255, 60);\n"
"    color:white;\n"
"    border-radius: 8px;\n"
"    font-family: 微软雅黑;\n"
"    text-align: left;\n"
"    font: 20px;\n"
"}")
        self.label_9.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.tab_4)
        self.label_10.setGeometry(QtCore.QRect(930, 160, 81, 41))
        self.label_10.setStyleSheet("QLabel{\n"
"    background:rgb(255, 255, 255, 60);\n"
"    color:white;\n"
"    border-radius: 8px;\n"
"    font-family: 微软雅黑;\n"
"    text-align: left;\n"
"    font: 20px;\n"
"}")
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.tab_4)
        self.label_11.setGeometry(QtCore.QRect(530, 160, 231, 41))
        self.label_11.setStyleSheet("QLabel{\n"
"    background:rgb(255, 255, 255, 60);\n"
"    color:white;\n"
"    border-radius: 8px;\n"
"    font-family: 微软雅黑;\n"
"    text-align: left;\n"
"    font: 20px;\n"
"}")
        self.label_11.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.tab_4)
        self.label_12.setGeometry(QtCore.QRect(780, 160, 231, 41))
        self.label_12.setStyleSheet("QLabel{\n"
"    background:rgb(255, 255, 255, 60);\n"
"    color:white;\n"
"    border-radius: 8px;\n"
"    font-family: 微软雅黑;\n"
"    text-align: left;\n"
"    font: 20px;\n"
"}")
        self.label_12.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.tab_4)
        self.label_13.setGeometry(QtCore.QRect(680, 160, 81, 41))
        self.label_13.setStyleSheet("QLabel{\n"
"    background:rgb(255, 255, 255, 60);\n"
"    color:white;\n"
"    border-radius: 8px;\n"
"    font-family: 微软雅黑;\n"
"    text-align: left;\n"
"    font: 20px;\n"
"}")
        self.label_13.setAlignment(QtCore.Qt.AlignCenter)
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.tab_4)
        self.label_14.setGeometry(QtCore.QRect(930, 110, 81, 41))
        self.label_14.setStyleSheet("QLabel{\n"
"    background:rgb(255, 255, 255, 60);\n"
"    color:white;\n"
"    border-radius: 8px;\n"
"    font-family: 微软雅黑;\n"
"    text-align: left;\n"
"    font: 20px;\n"
"}")
        self.label_14.setAlignment(QtCore.Qt.AlignCenter)
        self.label_14.setObjectName("label_14")
        self.tabWidget_2.addTab(self.tab_4, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.pushButton_11 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_11.setGeometry(QtCore.QRect(250, 570, 141, 48))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_11.sizePolicy().hasHeightForWidth())
        self.pushButton_11.setSizePolicy(sizePolicy)
        self.pushButton_11.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_11.setFont(font)
        self.pushButton_11.setToolTipDuration(-1)
        self.pushButton_11.setStyleSheet("QPushButton {\n"
"    border: 2px solid rgb(52, 59, 72);\n"
"    border-radius: 5px;    \n"
"    background-color: rgb(52, 59, 72);\n"
"    color:white;\n"
"    font: 20px;\n"
"    font_famili: 微软雅黑;\n"
"    font-weight: 600;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: rgb(57, 65, 80);\n"
"    border: 2px solid rgb(61, 70, 86);\n"
"}\n"
"QPushButton:pressed {    \n"
"    background-color: rgb(35, 40, 49);\n"
"    border: 2px solid rgb(43, 50, 61);\n"
"}")
        self.pushButton_11.setIconSize(QtCore.QSize(14, 14))
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_12 = QtWidgets.QPushButton(self.tab_5)
        self.pushButton_12.setGeometry(QtCore.QRect(650, 570, 141, 48))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_12.sizePolicy().hasHeightForWidth())
        self.pushButton_12.setSizePolicy(sizePolicy)
        self.pushButton_12.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_12.setFont(font)
        self.pushButton_12.setToolTipDuration(-1)
        self.pushButton_12.setStyleSheet("QPushButton {\n"
"    border: 2px solid rgb(52, 59, 72);\n"
"    border-radius: 5px;    \n"
"    background-color: rgb(52, 59, 72);\n"
"    color:white;\n"
"    font: 20px;\n"
"    font_famili: 微软雅黑;\n"
"    font-weight: 600;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: rgb(57, 65, 80);\n"
"    border: 2px solid rgb(61, 70, 86);\n"
"}\n"
"QPushButton:pressed {    \n"
"    background-color: rgb(35, 40, 49);\n"
"    border: 2px solid rgb(43, 50, 61);\n"
"}")
        self.pushButton_12.setIconSize(QtCore.QSize(14, 14))
        self.pushButton_12.setObjectName("pushButton_12")
        self.textEdit_8 = QtWidgets.QTextEdit(self.tab_5)
        self.textEdit_8.setGeometry(QtCore.QRect(10, 10, 1021, 551))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(-1)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.textEdit_8.setFont(font)
        self.textEdit_8.setStyleSheet("\n"
"QTextEdit{\n"
"    font: 15px;\n"
"    font-family: 微软雅黑;\n"
"    border: 2px solid rgb(181, 181, 181);\n"
"    border-radius: 8px;\n"
"}\n"
"\n"
"\n"
"QScrollBar:vertical {\n"
"    border-width: 0px;\n"
"    border: none;\n"
"          background:rgba(0, 0, 85, 0);\n"
"          width:12px;\n"
"          margin: 0px 0px 0px 0px;\n"
"      }\n"
"QScrollBar::handle:vertical {\n"
"          background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
"          stop: 0 rgb(181, 181, 181), stop: 0.5 rgb(181, 181, 181), stop:1 rgb(181, 181, 181));\n"
"          min-height: 20px;\n"
"          max-height: 20px;\n"
"          margin: 0 0px 0 0px;\n"
"          border-radius: 6px;\n"
"      }\n"
"      QScrollBar::add-line:vertical {\n"
"          background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
"          stop: 0 rgba(0, 0, 85, 0), stop: 0.5 rgba(0, 0, 85, 0),  stop:1 rgba(0, 0, 85, 0));\n"
"          height: 0px;\n"
"          border: none;\n"
"          subcontrol-position: bottom;\n"
"          subcontrol-origin: margin;\n"
"      }\n"
"      QScrollBar::sub-line:vertical {\n"
"          background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
"          stop: 0  rgbargba(0, 0, 85, 0), stop: 0.5 rgba(0, 0, 85, 0),  stop:1 rgba(0, 0, 85, 0));\n"
"          height: 0 px;\n"
"          border: none;\n"
"          subcontrol-position: top;\n"
"          subcontrol-origin: margin;\n"
"      }\n"
"      QScrollBar::sub-page:vertical {\n"
"      background: rgba(0, 0, 85, 0);\n"
"      }\n"
"\n"
"      QScrollBar::add-page:vertical {\n"
"      background: rgba(0, 0, 85, 0);\n"
"      }\n"
"")
        self.textEdit_8.setFrameShape(QtWidgets.QFrame.Box)
        self.textEdit_8.setLineWidth(1)
        self.textEdit_8.setMidLineWidth(0)
        self.textEdit_8.setObjectName("textEdit_8")
        self.tabWidget_2.addTab(self.tab_5, "")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.pushButton_13 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_13.setGeometry(QtCore.QRect(280, 760, 141, 48))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_13.sizePolicy().hasHeightForWidth())
        self.pushButton_13.setSizePolicy(sizePolicy)
        self.pushButton_13.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_13.setFont(font)
        self.pushButton_13.setToolTipDuration(-1)
        self.pushButton_13.setStyleSheet("QPushButton {\n"
"    border: 2px solid rgb(52, 59, 72);\n"
"    border-radius: 5px;    \n"
"    background-color: rgb(52, 59, 72);\n"
"    color:white;\n"
"    font: 20px;\n"
"    font_famili: 微软雅黑;\n"
"    font-weight: 600;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: rgb(57, 65, 80);\n"
"    border: 2px solid rgb(61, 70, 86);\n"
"}\n"
"QPushButton:pressed {    \n"
"    background-color: rgb(35, 40, 49);\n"
"    border: 2px solid rgb(43, 50, 61);\n"
"}")
        self.pushButton_13.setIconSize(QtCore.QSize(14, 14))
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_14 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_14.setGeometry(QtCore.QRect(680, 760, 141, 48))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_14.sizePolicy().hasHeightForWidth())
        self.pushButton_14.setSizePolicy(sizePolicy)
        self.pushButton_14.setMinimumSize(QtCore.QSize(20, 20))
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pushButton_14.setFont(font)
        self.pushButton_14.setToolTipDuration(-1)
        self.pushButton_14.setStyleSheet("QPushButton {\n"
"    border: 2px solid rgb(52, 59, 72);\n"
"    border-radius: 5px;    \n"
"    background-color: rgb(52, 59, 72);\n"
"    color:white;\n"
"    font: 20px;\n"
"    font_famili: 微软雅黑;\n"
"    font-weight: 600;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: rgb(57, 65, 80);\n"
"    border: 2px solid rgb(61, 70, 86);\n"
"}\n"
"QPushButton:pressed {    \n"
"    background-color: rgb(35, 40, 49);\n"
"    border: 2px solid rgb(43, 50, 61);\n"
"}")
        self.pushButton_14.setIconSize(QtCore.QSize(14, 14))
        self.pushButton_14.setObjectName("pushButton_14")
        self.label_3 = QtWidgets.QLabel(self.tab_2)
        self.label_3.setGeometry(QtCore.QRect(10, 10, 1031, 731))
        self.label_3.setStyleSheet("border: 1px solid rgb(89, 89, 89); \n"
"")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.tabWidget.addTab(self.tab_2, "")
        self.widget_13 = QtWidgets.QWidget(Form)
        self.widget_13.setGeometry(QtCore.QRect(1010, 10, 271, 44))
        self.widget_13.setStyleSheet("image: url(:/picture/xidianlogo.png);\n"
"")
        self.widget_13.setObjectName("widget_13")

        self.retranslateUi(Form)
        self.tabWidget.setCurrentIndex(0)
        self.tabWidget_2.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Form)

########################################################################################################
        self.countcouple = 0  # QRadioButton点一下响应2次所以需要计数帮助
        self.counttask = 0
        self.countblackwhite = 0
        self.countdataset = 0
        self.countmodel = 0
        self.countdistance = 0
        self.counttarget = 0

        # 按钮的槽函数响应
        self.radioButton_18.toggled.connect(lambda: self.state_couple(self.radioButton_18))
        self.radioButton_19.toggled.connect(lambda: self.state_couple(self.radioButton_19))
        self.radioButton_20.toggled.connect(lambda: self.state_couple(self.radioButton_20))
        self.radioButton_27.toggled.connect(lambda: self.state_task(self.radioButton_27))
        self.radioButton_28.toggled.connect(lambda: self.state_task(self.radioButton_28))
        self.radioButton_29.toggled.connect(lambda: self.state_task(self.radioButton_29))
        self.radioButton_33.toggled.connect(lambda: self.state_task(self.radioButton_33))
        self.radioButton_34.toggled.connect(lambda: self.state_task(self.radioButton_34))
        self.radioButton_35.toggled.connect(lambda: self.state_blackwhite(self.radioButton_35))
        self.radioButton_36.toggled.connect(lambda: self.state_blackwhite(self.radioButton_36))
        self.radioButton_37.toggled.connect(lambda: self.state_blackwhite(self.radioButton_37))
        self.radioButton_30.toggled.connect(lambda: self.state_dataset(self.radioButton_30))
        self.radioButton_31.toggled.connect(lambda: self.state_dataset(self.radioButton_31))
        self.radioButton_32.toggled.connect(lambda: self.state_dataset(self.radioButton_32))
        self.radioButton_38.toggled.connect(lambda: self.state_dataset(self.radioButton_38))
        # self.radioButton_39.toggled.connect(lambda: self.state_dataset(self.radioButton_39))
        self.radioButton_40.toggled.connect(lambda: self.state_dataset(self.radioButton_40))
        self.radioButton_41.toggled.connect(lambda: self.state_dataset(self.radioButton_41))
        self.radioButton_42.toggled.connect(lambda: self.state_model(self.radioButton_42))
        self.radioButton_43.toggled.connect(lambda: self.state_model(self.radioButton_43))
        self.radioButton_44.toggled.connect(lambda: self.state_model(self.radioButton_44))
        # self.radioButton_45.toggled.connect(lambda: self.state_model(self.radioButton_45))
        self.radioButton_46.toggled.connect(lambda: self.state_model(self.radioButton_46))
        self.radioButton_47.toggled.connect(lambda: self.state_model(self.radioButton_47))
        self.radioButton_48.toggled.connect(lambda: self.state_model(self.radioButton_48))
        self.radioButton_49.toggled.connect(lambda: self.state_distance(self.radioButton_49))
        self.radioButton_50.toggled.connect(lambda: self.state_distance(self.radioButton_50))
        self.radioButton_51.toggled.connect(lambda: self.state_distance(self.radioButton_51))
        self.radioButton_52.toggled.connect(lambda: self.state_distance(self.radioButton_52))
        self.radioButton_53.toggled.connect(lambda: self.state_target(self.radioButton_53))
        self.radioButton_55.toggled.connect(lambda: self.state_target(self.radioButton_55))

        self.pushButton_15.clicked.connect(self.confirm)
        self.pushButton_16.clicked.connect(self.reset)
        self.pushButton_7.clicked.connect(
                lambda: self.cock(self.task, self.dataset, self.model, self.method, self.epsilon, self.distance,
                                  self.target))
        self.pushButton_8.clicked.connect(lambda: self.changepage(-1))
        self.pushButton_9.clicked.connect(lambda: self.changepage(1))
        self.pushButton_10.clicked.connect(self.clean)
        self.pushButton_11.clicked.connect(self.loadhistory)
        self.pushButton_12.clicked.connect(self.cleanhistory)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label_6.setText(_translate("Form", "对抗样本生成工具"))
        self.textEdit_3.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'微软雅黑\'; font-size:15px; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:15px;\">#欢迎使用对抗样本工具！</span></p></body></html>"))
        self.radioButton_18.setText(_translate("Form", "图像"))
        self.radioButton_19.setText(_translate("Form", "文本"))
        self.radioButton_20.setText(_translate("Form", "语音"))
        self.label_24.setText(_translate("Form", "对抗攻击对象"))
        self.label_31.setText(_translate("Form", "选择攻击对象即输入样本的类型"))
        self.radioButton_27.setText(_translate("Form", "语义分割"))
        self.radioButton_28.setText(_translate("Form", "图像分类"))
        self.radioButton_29.setText(_translate("Form", "目标检测"))
        self.label_25.setText(_translate("Form", "对抗攻击任务"))
        self.radioButton_33.setText(_translate("Form", "文本攻击"))
        self.radioButton_34.setText(_translate("Form", "语音攻击"))
        self.label_32.setText(_translate("Form", "选择对抗攻击任务"))
        self.radioButton_35.setText(_translate("Form", "黑盒"))
        self.radioButton_36.setText(_translate("Form", "白盒"))
        self.radioButton_37.setText(_translate("Form", "面向物理世界"))
        self.label_26.setText(_translate("Form", "黑白盒攻击"))
        self.label_36.setText(_translate("Form", "选择黑白盒攻击或面向物理世界方法"))
        self.label_27.setText(_translate("Form", "对抗攻击方法"))
        self.comboBox_4.setItemText(0, _translate("Form", "VirtualAdversarialAttack"))
        self.comboBox_4.setItemText(1, _translate("Form", "EADAttack"))
        self.comboBox_4.setItemText(2, _translate("Form", "DatasetAttack"))
        self.comboBox_4.setItemText(3, _translate("Form", "SquareAttack"))
        self.comboBox_4.setItemText(4, _translate("Form", "GeoDA"))
        self.comboBox_4.setItemText(5, _translate("Form", "LinearSearchBlendedUniformNoiseAttack"))
        self.comboBox_4.setItemText(6, _translate("Form", "L2ClippingAwareAdditiveUniformNoiseAttack"))
        self.comboBox_4.setItemText(7, _translate("Form", "L2RepeatedAdditiveUniformNoiseAttack"))
        self.comboBox_4.setItemText(8, _translate("Form", "L2AdditiveUniformNoiseAttack"))
        self.comboBox_4.setItemText(9, _translate("Form", "LinfRepeatedAdditiveUniformNoiseAttack"))
        self.comboBox_4.setItemText(10, _translate("Form", "LinfAdditiveUniformNoiseAttack"))
        self.comboBox_4.setItemText(11, _translate("Form", "L2ClippingAwareRepeatedAdditiveUniformNoiseAttack"))
        self.comboBox_4.setItemText(12, _translate("Form", "BinarySearchContrastReductionAttack"))
        self.comboBox_4.setItemText(13, _translate("Form", "SaltAndPepperNoiseAttack"))
        self.comboBox_4.setItemText(14, _translate("Form", "L2ClippingAwareRepeatedAdditiveGaussianNoiseAttack"))
        self.comboBox_4.setItemText(15, _translate("Form", "L2ClippingAwareAdditiveGaussianNoiseAttack"))
        self.comboBox_4.setItemText(16, _translate("Form", "L2RepeatedAdditiveGaussianNoiseAttack"))
        self.comboBox_4.setItemText(17, _translate("Form", "L2AdditiveGaussianNoiseAttack"))
        self.comboBox_4.setItemText(18, _translate("Form", "LinearSearchContrastReductionAttack"))
        self.comboBox_4.setItemText(19, _translate("Form", "L2ContrastReductionAttack"))
        self.comboBox_4.setItemText(20, _translate("Form", "L2UGD"))
        self.comboBox_4.setItemText(21, _translate("Form", "L2GGD"))
        self.comboBox_4.setItemText(22, _translate("Form", "LinfUGD"))
        self.comboBox_4.setItemText(23, _translate("Form", "L2CGGD"))
        self.comboBox_4.setItemText(24, _translate("Form", "L2CUGD"))
        self.comboBox_5.setItemText(0, _translate("Form", "L2UMN"))
        self.comboBox_5.setItemText(1, _translate("Form", "L2GMN"))
        self.comboBox_5.setItemText(2, _translate("Form", "LinfUMN"))
        self.comboBox_5.setItemText(3, _translate("Form", "L2CGMN"))
        self.comboBox_5.setItemText(4, _translate("Form", "L2CUMN"))
        self.comboBox_5.setItemText(5, _translate("Form", "L2CarliniWagnerAttack"))
        self.comboBox_5.setItemText(6, _translate("Form", "LinfDeepFoolAttack"))
        self.comboBox_5.setItemText(7, _translate("Form", "L2FMNAttack"))
        self.comboBox_5.setItemText(8, _translate("Form", "L1BrendelBethgeAttack"))
        self.comboBox_5.setItemText(9, _translate("Form", "LinfinityBrendelBethgeAttack"))
        self.comboBox_5.setItemText(10, _translate("Form", "L2FastGradientAttack"))
        self.comboBox_5.setItemText(11, _translate("Form", "L2BasicIterativeAttack"))
        self.comboBox_5.setItemText(12, _translate("Form", "L2ProjectedGradientDescentAttack"))
        self.comboBox_5.setItemText(13, _translate("Form", "L2DeepFoolAttack"))
        self.comboBox_5.setItemText(14, _translate("Form", "L1FMNAttack"))
        self.comboBox_5.setItemText(15, _translate("Form", "LInfFMNAttack"))
        self.comboBox_5.setItemText(16, _translate("Form", "L2BrendelBethgeAttack"))
        self.comboBox_5.setItemText(17, _translate("Form", "DDNAttack"))
        self.comboBox_5.setItemText(18, _translate("Form", "GaussianBlurAttack"))
        self.comboBox_5.setItemText(19, _translate("Form", "LinfFastGradientAttack"))
        self.comboBox_5.setItemText(20, _translate("Form", "LinfBasicIterativeAttack"))
        self.comboBox_5.setItemText(21, _translate("Form", "LinfProjectedGradientDescentAttack"))
        self.comboBox_5.setItemText(22, _translate("Form", "BoundaryAttack"))
        self.comboBox_5.setItemText(23, _translate("Form", "AutoAttack"))
        self.comboBox_5.setItemText(24, _translate("Form", "AutoProjectedGradientDescent"))
        self.comboBox_5.setItemText(25, _translate("Form", "AutoConjugateGradient"))
        self.comboBox_5.setItemText(26, _translate("Form", "CarliniL0Method"))
        self.comboBox_5.setItemText(27, _translate("Form", "CarliniLInfMethod"))
        self.comboBox_5.setItemText(28, _translate("Form", "SaliencyMapMethod"))
        self.comboBox_6.setItemText(0, _translate("Form", "Dpatch"))
        self.comboBox_6.setItemText(1, _translate("Form", "RobustDPatch"))
        self.comboBox_6.setItemText(2, _translate("Form", "ProjectedGradientDescent"))
        self.comboBox_6.setItemText(3, _translate("Form", "GeneralAdversarialAttack"))
        self.comboBox_6.setItemText(4, _translate("Form", "L2UAP"))
        self.label_37.setText(_translate("Form", "选择对抗攻击方法"))
        self.label_41.setText(_translate("Form", "(黑盒)"))
        self.label_42.setText(_translate("Form", "(白盒)"))
        self.label_43.setText(_translate("Form", "(面向物理世界)"))
        self.radioButton_30.setText(_translate("Form", "CIFAR10"))
        self.radioButton_31.setText(_translate("Form", "MNIST"))
        self.radioButton_32.setText(_translate("Form", "ImageNet"))
        self.label_28.setText(_translate("Form", "数据集"))
        self.radioButton_38.setText(_translate("Form", "MSTAR"))
        self.radioButton_40.setText(_translate("Form", "SAR-ship-Dataset"))
        self.radioButton_41.setText(_translate("Form", "FAIR1M"))
        self.label_38.setText(_translate("Form", "选择对抗攻击的输入样本数据集"))
        self.radioButton_42.setText(_translate("Form", "ResNet50"))
        self.radioButton_43.setText(_translate("Form", "VGG16"))
        self.radioButton_44.setText(_translate("Form", "GoogleNet"))
        self.label_29.setText(_translate("Form", "模型"))
        self.radioButton_46.setText(_translate("Form", "YOLOv5s"))
        self.radioButton_47.setText(_translate("Form", "YOLOv3"))
        self.radioButton_48.setText(_translate("Form", "FasterRCNN"))
        self.label_39.setText(_translate("Form", "选择对抗攻击模型"))
        self.label_30.setText(_translate("Form", "攻击方法参数"))
        self.lineEdit_3.setText(_translate("Form", "0.5"))
        self.label_33.setText(_translate("Form", "扰动"))
        self.label_34.setText(_translate("Form", "距离范数"))
        self.radioButton_49.setText(_translate("Form", "L0"))
        self.radioButton_50.setText(_translate("Form", "L1"))
        self.radioButton_51.setText(_translate("Form", "L2"))
        self.radioButton_52.setText(_translate("Form", "L∞"))
        self.label_35.setText(_translate("Form", "是否有攻击目标"))
        self.radioButton_53.setText(_translate("Form", "是"))
        self.radioButton_55.setText(_translate("Form", "否"))
        self.label_40.setText(_translate("Form", "扰动大小需在0-1之间 距离范数默认值为L1 是否有攻击目标默认值为否"))
        self.pushButton_15.setText(_translate("Form", "确定"))
        self.pushButton_16.setText(_translate("Form", "重置"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_3), _translate("Form", "参数设置"))
        self.label_4.setText(_translate("Form", "输入原图"))
        self.label_5.setText(_translate("Form", "输出样本"))
        self.pushButton_7.setText(_translate("Form", "开始测试"))
        self.pushButton_8.setText(_translate("Form", "上一组"))
        self.pushButton_9.setText(_translate("Form", "下一组"))
        self.pushButton_10.setText(_translate("Form", "清空"))
        self.textEdit_9.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'微软雅黑\'; font-size:15px; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:15px;\">###过程信息显示栏###</span></p></body></html>"))
        self.textEdit_10.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'微软雅黑\'; font-size:15px; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:15px;\">###结果信息显示栏###</span></p></body></html>"))
        self.label_7.setText(_translate("Form", "none"))
        self.label_8.setText(_translate("Form", "   攻击成功率"))
        self.label_9.setText(_translate("Form", "   测试样本总数"))
        self.label_10.setText(_translate("Form", "none"))
        self.label_11.setText(_translate("Form", "   攻击测试时间"))
        self.label_12.setText(_translate("Form", "   ASR-MIOU"))
        self.label_13.setText(_translate("Form", "none"))
        self.label_14.setText(_translate("Form", "none"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_4), _translate("Form", "对抗攻击"))
        self.pushButton_11.setText(_translate("Form", "加载记录"))
        self.pushButton_12.setText(_translate("Form", "清空记录"))
        self.textEdit_8.setHtml(_translate("Form", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'微软雅黑\'; font-size:15px; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.tabWidget_2.setTabText(self.tabWidget_2.indexOf(self.tab_5), _translate("Form", "历史记录"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Form", "对抗样本攻击方法"))
        self.pushButton_13.setText(_translate("Form", "上一页"))
        self.pushButton_14.setText(_translate("Form", "下一页"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Form", "对抗样本机理介绍"))

    # 对抗攻击函数
    def cock(self, task, dataset, model, method, epsilon, distance, target):
        self.logs(self.textEdit_3, "开始对抗攻击！")

        distance_str = None
        if method in ['GaussianBlurAttack', 'BinarySearchContrastReductionAttack', 'DatasetAttack', 'LinearSearchContrastReductionAttack', 'LinearSearchBlendedUniformNoiseAttack']:  # 有distance
            distance_str = distance

        epsilons = []
        epsilons.append(float(epsilon))

        targeted = False
        if target == 'True': targeted = True

        substitute = True
        if model == 'transform': substitute = False

        task_num = 0
        save_path = '../adv-img/'
        save_boxes_path = None
        if task == "图像分类":
            task_num = 0
        elif task == "目标检测":
            task_num = 1
            save_boxes_path = '../results-img/object-detection/'
        elif task == "语义分割":
            task_num = 2
            save_boxes_path = '../results-img/semantic-segmentation/'
            dataset = 'robot'
            model = 'transform'
            method = 'SegPGD-BlockBox'
            targeted = False
            substitute = True
            if model == 'transform':
                substitute = False
            epsilons = [0.5]
        elif task == "语音攻击":
            task_num = 3
            dataset = "AudioMNIST"
            model = "ResNet18"
            save_path = "../results-audio/wav/"
            save_boxes_path = "../results-audio/wave_form/"
            epsilons = 0.005
        elif task == "文本攻击":
            task_num = 4
            dataset = 'ag'
            model = 'wordLSTM'
            save_path = '../results-text/'

        print(f"攻击设置如下：\n任务： {task}\n方法： {method}\n数据集： {dataset}\n模型： {model}\n扰动： {epsilons}\n距离范数： {distance_str}\n是否有攻击目标： {targeted}\n保存地址： {save_boxes_path}")

        f = open("AE_thread_info.txt", "w")  # (文件名, 读写模式)
        f.write(f"{model}\n{dataset}\n{task_num}\n{save_path}\n{save_boxes_path}\n{substitute}\n{method}\n{targeted}\n{distance_str}\n{epsilons}")
        f.close()
        dict = {"model_name": "",
                "dataset_name": "",
                "task": None,
                "save_path": '../adv-img/',
                "save_boxes_path": '',
                "substitute": "",
                "method_name": "",
                "targeted": False,
                "distance_str": None,
                "epsilons": [],
                }
        dict["model_name"] = model
        dict["dataset_name"] = dataset
        dict["task"] = task_num
        dict["save_path"] = save_path
        dict["save_boxes_path"] = save_boxes_path
        dict["substitute"] = substitute
        dict["method_name"] = method
        dict["targeted"] = targeted
        dict["distance_str"] = distance_str
        dict["epsilons"] = epsilons
        with open("AE_thread_info.json", "w") as f:
            json.dump(dict, f)

        realtime_result = subprocess.Popen("python subprocess0319.py",
                                           shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        while True:  # 实时输出结果
            temp_result = realtime_result.stdout.readline().decode().strip()
            self.textEdit_9.append(temp_result)
            QApplication.processEvents()
            if temp_result == '' and realtime_result.poll() != None:
                break

        # 结果输出显示
        if task_num == 0 or task_num == 1 or task_num == 2:
            self.logs(self.textEdit_10, self.filereadwrite("r", "record_content.txt", ""))
            self.showimage(self.filereadwrite("r", "record_site.txt", ""), task_num)
            self.showresult()
            self.save()
        elif task_num == 3:
            pass
        elif task_num == 4:
            pass

    def showresult(self):
        with open("AE_attackresult.json", 'r') as load_f:
            load_dict = json.load(load_f)
        self.label_7.setText(str(load_dict["success_rate"]) + "%") # 攻击成功率
        if self.dataset == "CIFAR10": # 样本数 CIFAR10 MNIST ImageNet MSTAR PaviaU SAR-ship-Dataset FAIR1M
            self.label_14.setText("60k")
        elif self.dataset == "MNIST":
            self.label_14.setText("10k")
        elif self.dataset == "ImageNet":
            self.label_14.setText("141w")
        elif self.dataset == "MSTAR":
            self.label_14.setText("15k")
        elif self.dataset == "PaviaU":
            self.label_14.setText("10000")
        elif self.dataset == "SAR-ship-Dataset":
            self.label_14.setText("10000")
        elif self.dataset == "FAIR1M":
            self.label_14.setText("10000")
        self.label_13.setText(str(format(load_dict["attack_time"], '.2f')) + "s") # 攻击时间
        self.label_10.setText("none")

    def showimage(self, imagepath, task_num):
        self.picture_num = 0
        self.photos = []
        content = imagepath
        if task_num == 0:
            num_photos = len(os.listdir(glob.glob(content)[0]))
            for i in range(int(num_photos / 2)):
                photo = os.path.join(content, '{:}.png'.format(i))
                photo_adv = os.path.join(content, '{:}_adv.png'.format(i))
                self.photos.append(photo)
                self.photos.append(photo_adv)
        elif task_num == 1:
            num_photos = len(os.listdir(glob.glob(content)[0]))
            for i in range(int(num_photos / 2)):
                photo = os.path.join(content, '{:}.jpg'.format(i))
                photo_adv = os.path.join(content, '{:}_adv.jpg'.format(i))
                self.photos.append(photo)
                self.photos.append(photo_adv)
        elif task_num == 2:
            onnx_raw_draw_path = content.split('onnx_raw_draw')[0] + 'onnx_raw_draw'
            onnx_adv_draw_path = content.split('onnx_raw_draw')[1]
            for img_name in sorted(os.listdir(onnx_raw_draw_path)):
                photo = os.path.join(onnx_raw_draw_path, img_name)
                photo_adv = os.path.join(onnx_adv_draw_path, img_name)
                self.photos.append(photo)
                self.photos.append(photo_adv)
        pixmap1 = QPixmap(self.photos[self.picture_num])  # 按指定路径找到图片
        self.label.setPixmap(pixmap1)  # 在label上显示图片
        self.label.setScaledContents(True)  # 让图片自适应label大小
        pixmap2 = QPixmap(self.photos[self.picture_num+1])  # 按指定路径找到图片
        self.label_2.setPixmap(pixmap2)  # 在label上显示图片
        self.label_2.setScaledContents(True)  # 让图片自适应label大小

    def changepage(self, num):
        self.picture_num = self.picture_num + num * 2
        if self.picture_num < 0 or self.picture_num > len(self.photos) - 1:
            self.picture_num = self.picture_num - num * 2
        else:
            pixmap1 = QPixmap(self.photos[self.picture_num])  # 按指定路径找到图片
            self.label.setPixmap(pixmap1)  # 在label上显示图片
            self.label.setScaledContents(True)  # 让图片自适应label大小
            pixmap2 = QPixmap(self.photos[self.picture_num + 1])  # 按指定路径找到图片
            self.label_2.setPixmap(pixmap2)  # 在label上显示图片
            self.label_2.setScaledContents(True)  # 让图片自适应label大小

    def save(self):
        self.currenttime = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))
        # common.attacks(model_name=model, dataset_name=dataset, task=task_num, save_path='../adv-img/',
        #                save_boxes_path=save_boxes_path, substitute=substitute,
        #                method_name=method, targeted=targeted, distance_str=distance_str,
        #                epsilons=epsilons)
        # 1次实验至少有12个参数(模型 数据集 任务 保存路径 其他路径 替代模型 方法 目标 距离范数 扰动 攻击成功率 攻击时间)
        save_list = [self.model, self.dataset, self.task, '../adv-img/', '../adv-img/', 'None', self.method, self.target, self.distance, self.epsilon, self.label_7.text(), self.label_13.text()]
        print(save_list)
        outwb = Workbook()
        outws = outwb.worksheets[0]
        outws.append(["模型", "数据集", "任务", "保存路径", "其他路径", "替代模型", "方法", "目标", "距离范数", "扰动", "攻击成功率", "攻击时间"])  # 先添加一行表头
        outws.append(save_list)
        outwb.save(f'{self.currenttime}.xlsx')
        self.logs(self.textEdit_3, "实验数据已保存至%s.xlsx文件"%self.currenttime)

    def clean(self):
        self.logs(self.textEdit_3, "测试数据已清空")
        self.textEdit_9.clear()
        self.textEdit_10.clear()
        self.textEdit_9.append("###过程信息显示栏###")
        self.textEdit_10.append("###结果信息显示栏###")
        self.label.clear()
        self.label_2.clear()
        self.label_7.clear()
        self.label_14.clear()
        self.label_13.clear()
        self.label_10.clear()

    def loadhistory(self):
        self.logs(self.textEdit_8, self.filereadwrite("r", "record_content.txt", ""))

    def cleanhistory(self):
        self.textEdit_8.clear()

    # 确定按钮
    def confirm(self):
        # 取方法值
        if self.blackwhite == "黑盒":
            self.method = self.comboBox_4.currentText()
        elif self.blackwhite == "白盒":
            self.method = self.comboBox_5.currentText()
        elif self.blackwhite == "面向物理世界":
            self.method = self.comboBox_6.currentText()
        # 取扰动值
        self.epsilon = self.lineEdit_3.text()
        if self.couple == "图像":
            self.logs(self.textEdit_3, f"参数设置如下：\n对象： {self.couple}\n任务： {self.task}\n黑白盒： {self.blackwhite}\n方法： {self.method}\n数据集： {self.dataset}\n模型： {self.model}\n扰动： {self.epsilon}\n距离范数： {self.distance}\n是否有攻击目标： {self.target}")
        elif self.couple == "文本" or self.couple == "语音":
            self.logs(self.textEdit_3, f"参数设置如下：\n对象： {self.couple}\n任务： {self.task}")

    # 在信息栏添加当前事件
    def logs(self, target_, text):
        target_.append("# " + text)

    def filereadwrite(self, mode, filename, content):
        if mode == "r": # 读
            f = open(filename, "r") # (文件名, 读写模式)
            # 将文件中的内容以字符串的形式输出
            file_record = f.read()
            # 读取一行内容；
            # f.readline()
            # 读取所有行，以列表的方式返回；
            # f.readlines()
            # 关闭输入流
            f.close()
            return file_record
        else: # 写
            # 方法一：
            f = open(filename, "a") # (文件名, 读写模式)
            # 写字符串
            f.write(content)
            # 写字符串或者列表
            # f.writelines(内容)
            # 关闭输入流
            f.close()
            return None

            # # 方法二：
            # with open(filename, "") as f:
            #     # 写字符串
            #     f.write(content)
            #     # 写字符串或者列表
            #     # f.writelines(内容)

            # w：向文件中写入内容，w会清空原来文本内容
            # a：向文件中追加内容
            # r：从文件中读取内容
            # wb：以二进制形式写入内容。
            # rb：以二进制形式读文件内容
            # ab：以二进制形式追加内容
            # a +、r +、w +：混合形式，即可读可写

    def state_task(self, btn):
        # 语义分割 图像分类 目标检测 文本攻击 语音攻击
        self.counttask = self.counttask + 1
        if btn.text() == '语义分割':
            if btn.isChecked() == True:
                print("对抗攻击任务 " + btn.text() + " is selected")
                self.task = "语义分割"
                print(self.task)
        elif btn.text() == "图像分类":
            if btn.isChecked() == True:
                print("对抗攻击任务 " + btn.text() + " is selected")
                self.task = "图像分类"
                print(self.task)
        elif btn.text() == "目标检测":
            if btn.isChecked() == True:
                print("对抗攻击任务 " + btn.text() + " is selected")
                self.task = "目标检测"
                print(self.task)
        elif btn.text() == "文本攻击":
            if btn.isChecked() == True:
                print("对抗攻击任务 " + btn.text() + " is selected")
                self.task = "文本攻击"
                print(self.task)
        elif btn.text() == "语音攻击":
            if btn.isChecked() == True:
                print("对抗攻击任务 " + btn.text() + " is selected")
                self.task = "语音攻击"
                print(self.task)
        if self.counttask % 2 == 1:
            self.logs(self.textEdit_3, "已选择" + self.task + "为对抗攻击任务")

    def state_blackwhite(self, btn):
        # 黑盒 白盒 黑白盒
        self.countblackwhite = self.countblackwhite + 1
        if btn.text() == '黑盒':
            if btn.isChecked() == True:
                print("黑白盒攻击 " + btn.text() + " is selected")
                self.blackwhite = "黑盒"
                print(self.blackwhite)
        elif btn.text() == "白盒":
            if btn.isChecked() == True:
                print("黑白盒攻击 " + btn.text() + " is selected")
                self.blackwhite = "白盒"
                print(self.blackwhite)
        elif btn.text() == "面向物理世界":
            if btn.isChecked() == True:
                print("黑白盒攻击 " + btn.text() + " is selected")
                self.blackwhite = "面向物理世界"
                print(self.blackwhite)
        if self.countblackwhite % 2 == 1:
            self.logs(self.textEdit_3, "已选择" + self.blackwhite + "攻击")

    def state_dataset(self, btn):
        # CIFAR10 MNIST ImageNet MSTAR PaviaU SAR-ship-Dataset FAIR1M
        self.countdataset = self.countdataset + 1
        if btn.text() == 'CIFAR10':
            if btn.isChecked() == True:
                print("数据集 " + btn.text() + " is selected")
                self.dataset = "CIFAR10"
                print(self.dataset)
        elif btn.text() == "MNIST":
            if btn.isChecked() == True:
                print("数据集 " + btn.text() + " is selected")
                self.dataset = "MNIST"
                print(self.dataset)
        elif btn.text() == "ImageNet":
            if btn.isChecked() == True:
                print("数据集 " + btn.text() + " is selected")
                self.dataset = "ImageNet"
                print(self.dataset)
        elif btn.text() == "MSTAR":
            if btn.isChecked() == True:
                print("数据集 " + btn.text() + " is selected")
                self.dataset = "MSTAR"
                print(self.dataset)
        elif btn.text() == "PaviaU":
            if btn.isChecked() == True:
                print("数据集 " + btn.text() + " is selected")
                self.dataset = "PaviaU"
                print(self.dataset)
        elif btn.text() == "SAR-ship-Dataset":
            if btn.isChecked() == True:
                print("数据集 " + btn.text() + " is selected")
                self.dataset = "SAR-ship-Dataset"
                print(self.dataset)
        elif btn.text() == "FAIR1M":
            if btn.isChecked() == True:
                print("数据集 " + btn.text() + " is selected")
                self.dataset = "FAIR1M"
                print(self.dataset)
        if self.countdataset % 2 == 1:
            self.logs(self.textEdit_3, "已选择" + self.dataset + "为数据集")

    def state_model(self, btn):
        # ResNet50 VGG16 GoogleNet CNN2D YOLOv5s YOLOv3 FasterRCNN
        self.countmodel = self.countmodel + 1
        if btn.text() == 'ResNet50':
            if btn.isChecked() == True:
                print("模型 " + btn.text() + " is selected")
                self.model = "ResNet50"
                print(self.model)
        elif btn.text() == "VGG16":
            if btn.isChecked() == True:
                print("模型 " + btn.text() + " is selected")
                self.model = "VGG16"
                print(self.model)
        elif btn.text() == "GoogleNet":
            if btn.isChecked() == True:
                print("模型 " + btn.text() + " is selected")
                self.model = "GoogleNet"
                print(self.model)
        elif btn.text() == "CNN2D":
            if btn.isChecked() == True:
                print("模型 " + btn.text() + " is selected")
                self.model = "CNN2D"
                print(self.model)
        elif btn.text() == "YOLOv5s":
            if btn.isChecked() == True:
                print("模型 " + btn.text() + " is selected")
                self.model = "YOLOv5s"
                print(self.model)
        elif btn.text() == "YOLOv3":
            if btn.isChecked() == True:
                print("模型 " + btn.text() + " is selected")
                self.model = "YOLOv3"
                print(self.model)
        elif btn.text() == "FasterRCNN":
            if btn.isChecked() == True:
                print("模型 " + btn.text() + " is selected")
                self.model = "FasterRCNN"
                print(self.model)
        if self.countmodel % 2 == 1:
            self.logs(self.textEdit_3, "已选择" + self.model + "模型")

    def state_distance(self, btn):
        # L0 L1 L2 L∞
        self.countdistance = self.countdistance + 1
        if btn.text() == 'L0':
            if btn.isChecked() == True:
                print("距离范数 " + btn.text() + " is selected")
                self.distance = "L0"
                print(self.distance)
        elif btn.text() == "L1":
            if btn.isChecked() == True:
                print("距离范数 " + btn.text() + " is selected")
                self.distance = "L1"
                print(self.distance)
        elif btn.text() == "L2":
            if btn.isChecked() == True:
                print("距离范数 " + btn.text() + " is selected")
                self.distance = "L2"
                print(self.distance)
        elif btn.text() == "L∞":
            if btn.isChecked() == True:
                print("距离范数 " + btn.text() + " is selected")
                self.distance = "L∞"
                print(self.distance)
        if self.countdistance % 2 == 1:
            self.logs(self.textEdit_3, "已选择" + self.distance + "距离范数")

    def state_target(self, btn):
        # 是 否
        self.counttarget = self.counttarget + 1
        if btn.text() == '是':
            if btn.isChecked() == True:
                print("是否有攻击目标 " + btn.text() + " is selected")
                self.target = "是"
                print(self.target)
        elif btn.text() == "否":
            if btn.isChecked() == True:
                print("是否有攻击目标 " + btn.text() + " is selected")
                self.target = "否"
                print(self.target)
        if self.counttarget % 2 == 1:
            self.logs(self.textEdit_3, "已选择" + self.target + "攻击目标")

    # 对抗攻击方法
    def state_couple(self, btn):
        # 图像 文本 语音
        self.countcouple = self.countcouple + 1
        if btn.text() == '图像':
            if btn.isChecked() == True:
                print("对抗攻击对象 " + btn.text() + " is selected")
                self.couple = "图像"
                print(self.couple)
        elif btn.text() == "文本":
            if btn.isChecked() == True:
                print("对抗攻击对象 " + btn.text() + " is selected")
                self.couple = "文本"
                print(self.couple)
        elif btn.text() == "语音":
            if btn.isChecked() == True:
                print("对抗攻击对象 " + btn.text() + " is selected")
                self.couple = "语音"
                print(self.couple)
        if self.countcouple % 2 == 1:
            self.logs(self.textEdit_3, "已选择" + self.couple + "为对抗攻击对象")
        if self.couple == "图像":
            self.radioButton_27.setEnabled(True)
            self.radioButton_28.setEnabled(True)
            self.radioButton_29.setEnabled(True)
            self.radioButton_33.setEnabled(False)
            self.radioButton_34.setEnabled(False)
            self.radioButton_35.setEnabled(True)
            self.radioButton_36.setEnabled(True)
            self.radioButton_37.setEnabled(True)
            self.radioButton_30.setEnabled(True)
            self.radioButton_31.setEnabled(True)
            self.radioButton_32.setEnabled(True)
            self.radioButton_38.setEnabled(True)
            # self.radioButton_39.setEnabled(True)
            self.radioButton_40.setEnabled(True)
            self.radioButton_41.setEnabled(True)
            self.radioButton_42.setEnabled(True)
            self.radioButton_43.setEnabled(True)
            self.radioButton_44.setEnabled(True)
            # self.radioButton_45.setEnabled(True)
            self.radioButton_46.setEnabled(True)
            self.radioButton_47.setEnabled(True)
            self.radioButton_48.setEnabled(True)
            self.radioButton_49.setEnabled(True)
            self.radioButton_50.setEnabled(True)
            self.radioButton_51.setEnabled(True)
            self.radioButton_52.setEnabled(True)
            self.radioButton_53.setEnabled(True)
            self.radioButton_55.setEnabled(True)
            self.comboBox_4.setEnabled(True)
            self.comboBox_5.setEnabled(True)
            self.comboBox_6.setEnabled(True)
            self.lineEdit_3.setEnabled(True)
            self.task = ''
        elif self.couple == "文本":
            self.radioButton_27.setEnabled(False)
            self.radioButton_28.setEnabled(False)
            self.radioButton_29.setEnabled(False)
            self.radioButton_33.setEnabled(True)
            self.radioButton_34.setEnabled(False)
            self.radioButton_35.setEnabled(False)
            self.radioButton_36.setEnabled(False)
            self.radioButton_37.setEnabled(False)
            self.radioButton_30.setEnabled(False)
            self.radioButton_31.setEnabled(False)
            self.radioButton_32.setEnabled(False)
            self.radioButton_38.setEnabled(False)
            # self.radioButton_39.setEnabled(False)
            self.radioButton_40.setEnabled(False)
            self.radioButton_41.setEnabled(False)
            self.radioButton_42.setEnabled(False)
            self.radioButton_43.setEnabled(False)
            self.radioButton_44.setEnabled(False)
            # self.radioButton_45.setEnabled(False)
            self.radioButton_46.setEnabled(False)
            self.radioButton_47.setEnabled(False)
            self.radioButton_48.setEnabled(False)
            self.radioButton_49.setEnabled(False)
            self.radioButton_50.setEnabled(False)
            self.radioButton_51.setEnabled(False)
            self.radioButton_52.setEnabled(False)
            self.radioButton_53.setEnabled(False)
            self.radioButton_55.setEnabled(False)
            self.comboBox_4.setEnabled(False)
            self.comboBox_5.setEnabled(False)
            self.comboBox_6.setEnabled(False)
            self.lineEdit_3.setEnabled(False)
            self.task = '文本攻击'
        elif self.couple == "语音":
            self.radioButton_27.setEnabled(False)
            self.radioButton_28.setEnabled(False)
            self.radioButton_29.setEnabled(False)
            self.radioButton_33.setEnabled(False)
            self.radioButton_34.setEnabled(True)
            self.radioButton_35.setEnabled(False)
            self.radioButton_36.setEnabled(False)
            self.radioButton_37.setEnabled(False)
            self.radioButton_30.setEnabled(False)
            self.radioButton_31.setEnabled(False)
            self.radioButton_32.setEnabled(False)
            self.radioButton_38.setEnabled(False)
            # self.radioButton_39.setEnabled(False)
            self.radioButton_40.setEnabled(False)
            self.radioButton_41.setEnabled(False)
            self.radioButton_42.setEnabled(False)
            self.radioButton_43.setEnabled(False)
            self.radioButton_44.setEnabled(False)
            # self.radioButton_45.setEnabled(False)
            self.radioButton_46.setEnabled(False)
            self.radioButton_47.setEnabled(False)
            self.radioButton_48.setEnabled(False)
            self.radioButton_49.setEnabled(False)
            self.radioButton_50.setEnabled(False)
            self.radioButton_51.setEnabled(False)
            self.radioButton_52.setEnabled(False)
            self.radioButton_53.setEnabled(False)
            self.radioButton_55.setEnabled(False)
            self.comboBox_4.setEnabled(False)
            self.comboBox_5.setEnabled(False)
            self.comboBox_6.setEnabled(False)
            self.lineEdit_3.setEnabled(False)
            self.task = '语音攻击'

    def reset(self):
        self.radioButton_27.setEnabled(True)
        self.radioButton_28.setEnabled(True)
        self.radioButton_29.setEnabled(True)
        self.radioButton_33.setEnabled(True)
        self.radioButton_34.setEnabled(True)
        self.radioButton_35.setEnabled(True)
        self.radioButton_36.setEnabled(True)
        self.radioButton_37.setEnabled(True)
        self.radioButton_30.setEnabled(True)
        self.radioButton_31.setEnabled(True)
        self.radioButton_32.setEnabled(True)
        self.radioButton_38.setEnabled(True)
        # self.radioButton_39.setEnabled(True)
        self.radioButton_40.setEnabled(True)
        self.radioButton_41.setEnabled(True)
        self.radioButton_42.setEnabled(True)
        self.radioButton_43.setEnabled(True)
        self.radioButton_44.setEnabled(True)
        # self.radioButton_45.setEnabled(True)
        self.radioButton_46.setEnabled(True)
        self.radioButton_47.setEnabled(True)
        self.radioButton_48.setEnabled(True)
        self.radioButton_49.setEnabled(True)
        self.radioButton_50.setEnabled(True)
        self.radioButton_51.setEnabled(True)
        self.radioButton_52.setEnabled(True)
        self.radioButton_53.setEnabled(True)
        self.radioButton_55.setEnabled(True)
        self.comboBox_4.setEnabled(True)
        self.comboBox_5.setEnabled(True)
        self.comboBox_6.setEnabled(True)
        self.lineEdit_3.setEnabled(True)


